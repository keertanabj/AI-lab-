import math

# Constants
HUMAN = 'O'
AI = 'X'
EMPTY = ' '

def create_board():
    return [EMPTY] * 9

def print_board(board, show_positions=False):
    print()
    for i in range(3):
        row = []
        for j in range(3):
            index = i * 3 + j
            if show_positions and board[index] == EMPTY:
                row.append(str(index))
            else:
                row.append(board[index])
        print(' | '.join(row))
        if i < 2:
            print('-' * 5)
    print()

def available_moves(board):
    return [i for i, spot in enumerate(board) if spot == EMPTY]

def make_move(board, position, player):
    board[position] = player

def winner(board):
    win_combos = [
        (0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
        (0, 3, 6), (1, 4, 7), (2, 5, 8),  # cols
        (0, 4, 8), (2, 4, 6)              # diagonals
    ]
    for a, b, c in win_combos:
        if board[a] == board[b] == board[c] != EMPTY:
            return board[a]
    return None

def is_full(board):
    return EMPTY not in board

def minimax(board, depth, alpha, beta, is_maximizing):
    win = winner(board)
    if win == AI:
        return 10 - depth
    elif win == HUMAN:
        return depth - 10
    elif is_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for move in available_moves(board):
            board[move] = AI
            eval = minimax(board, depth + 1, alpha, beta, False)
            board[move] = EMPTY
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for move in available_moves(board):
            board[move] = HUMAN
            eval = minimax(board, depth + 1, alpha, beta, True)
            board[move] = EMPTY
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def best_move(board):
    best_val = -math.inf
    move = None
    for i in available_moves(board):
        board[i] = AI
        move_val = minimax(board, 0, -math.inf, math.inf, False)
        board[i] = EMPTY
        if move_val > best_val:
            best_val = move_val
            move = i
    return move

def play_game():
    board = create_board()
    print("Position guide (use these numbers to make moves):")
    print_board(board, show_positions=True)
    turn = HUMAN  # Human starts

    while True:
        if turn == HUMAN:
            try:
                move = int(input("Enter your move (0-8): "))
                if move not in available_moves(board):
                    print("Invalid move. Try again.")
                    continue
                make_move(board, move, HUMAN)
            except ValueError:
                print("Please enter a number between 0 and 8.")
                continue
        else:
            print("AI is making a move...")
            move = best_move(board)
            make_move(board, move, AI)

        print_board(board)
        win = winner(board)
        if win:
            print(f"{win} wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

        turn = AI if turn == HUMAN else HUMAN

if __name__ == "__main__":
    play_game()
