import math
import random

def heuristic(state):
    attacks = 0
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            if state[i] == state[j]:
                attacks += 1
            if abs(state[i] - state[j]) == abs(i - j):
                attacks += 1
    return attacks

def random_neighbor(state):
    """
    Generate a neighbor by randomly changing the row of one queen.
    """
    n = len(state)
    neighbor = list(state)
    col = random.randint(0, n - 1)
    row = random.randint(0, n - 1)
    while row == neighbor[col]:
        row = random.randint(0, n - 1)
    neighbor[col] = row
    return neighbor

def simulated_annealing(initial_state, max_iterations=10000, initial_temp=100, cooling_rate=0.995):
    current = initial_state
    current_cost = heuristic(current)
    temperature = initial_temp
    
    for i in range(max_iterations):
        if current_cost == 0:
            break
        
        neighbor = random_neighbor(current)
        neighbor_cost = heuristic(neighbor)
        
        delta = neighbor_cost - current_cost
        
        if delta < 0:
            # Better solution, accept it
            current = neighbor
            current_cost = neighbor_cost
        else:
            # Accept worse solution with a probability depending on temperature
            probability = math.exp(-delta / temperature)
            if random.random() < probability:
                current = neighbor
                current_cost = neighbor_cost
        
        # Cool down the temperature
        temperature *= cooling_rate
        if temperature < 1e-10:
            break
    
    return current, current_cost

def get_user_input():
    while True:
        try:
            user_input = input("Enter the initial state (4 numbers between 0 and 3 separated by spaces): ")
            state = list(map(int, user_input.strip().split()))
            if len(state) != 4 or any(r < 0 or r > 3 for r in state):
                raise ValueError
            return state
        except ValueError:
            print("Invalid input. Please enter exactly 4 numbers between 0 and 3 separated by spaces.")

def main():
    initial = get_user_input()
    solution, cost = simulated_annealing(initial)
    
    print(f"\nInitial state: {initial}")
    print(f"Final state: {solution}")
    print(f"Conflicts: {cost}")
    
    if cost == 0:
        print("Solution found! No conflicts.")
    else:
        print("No perfect solution found, but this is the best state found.")

if __name__ == "__main__":
    main()
